? with
?svd
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(SimFit)
data1 <- kinsim_single(name = "KinPair1",
Rel=1,
r_c = 1,
n=100,
mu=0,
ace=c(1,1,1))
library(SimFit)
kinsim_single(name = "KinPair1",
+                        Rel=1,
+                        r_c = 1,
+                        n=100,
+                        mu=0,
+                        ace=c(1,1,1))
load_all()
library(devtools)
load_all()
use_mit_license()
check()
check()
check()
install()
library(SimFit)
test <- kinsim_single()
View(test)
test2 <- kinsim_double()
View(test2)
library(SimFit)
test <- kinsim_double(
GroupNames = c("tiger","lion"),
GroupSizes = c(100,300),
GroupRel = c(.8,.6),
GroupR_c = c(.99,.95),
ifComb = TRUE)
tiger <- test[which(test$GroupName=="tiger"), c("y1","y2")]
lion <- test[which(test$GroupName=="lion"), c("y1","y2")]
testResult <- fit_siACE(tiger, lion, GroupRel = c(.8,.6),GroupR_c = c(.99,.95))
testResult <- fit_uniACE(tiger, lion, GroupRel = c(.8,.6),GroupR_c = c(.99,.95))
View(testResult)
testResult[["summary"]]
library(SimFit)
test <- Sim_Fit(GroupSizes = c(55,55), SSeed = 1999, nIter = 20)
View(test)
test[["Iteration1"]][["Results"]][["nest"]]
test[["Iteration4"]][["Results"]][["nest"]]
?Sim_Fit
test <- Sim_Fit(GroupSizes = c(55,55), SSeed = 1999, nIter = 20, saveRaw = TRUE)
View(test)
test[["Iteration1"]][["data"]]
test <- Sim_Fit(GroupSizes = c(55,55),GroupRel = c(.8,.5), SSeed = 1999, nIter = 5, saveRaw = TRUE, ifComb = TRUE)
test <- Sim_Fit(GroupSizes = c(56,56),GroupRel = c(.8,.5), SSeed = 1999, nIter = 5, saveRaw = TRUE, ifComb = TRUE)
test <- Sim_Fit(GroupSizes = c(56,56),GroupRel = c(.8,.5), SSeed = 1999, nIter = 5, saveRaw = TRUE, ifComb = FALSE)
test2 <- kinsim_double(GroupRel = c(.6,.5), ifComb = TRUE)
test2 <- kinsim_double(GroupRel = c(.6,.55), ifComb = TRUE)
test <- Sim_Fit(GroupSizes = c(56,56),GroupRel = c(.8,.55), SSeed = 1999, nIter = 5, saveRaw = TRUE, ifComb = FALSE)
test2 <- kinsim_double(GroupRel = c(.6,.501), ifComb = TRUE)
test2 <- kinsim_double(GroupRel = c(.6,.505), ifComb = TRUE)
library(devtools)
check()
install()
test2 <- kinsim_double(GroupRel = c(.6,.5), ifComb = TRUE)
library(SimFit)
test2 <- kinsim_double(GroupRel = c(.6,.5), ifComb = TRUE)
View(test2)
View(test2)
test2 <- kinsim_double(GroupRel = c(.6,.501), ifComb = TRUE)
?tryCatch
demo(error.catching)
library(devtools)
load_all
load_all()
expect_equal(ncol(kinsim_single(
name = "testtesttest",
Rel = .8,
r_c = .98,
n = 1000,
mu = 2,
ace = c(2,2,6)
)), 12)
test_that("single simulation works", {
expect_equal(ncol(kinsim_single(
name = "testtesttest",
Rel = .8,
r_c = .98,
n = 1000,
mu = 2,
ace = c(2,2,6)
)), 12)
})
check()
use_test("kinsim_double")
test_that("two group exist", {
expect_equal(length(unique(kinsim_double(GroupRel = c(.98,644),
ace2 = c(5,7,9),
ifComb = TRUE))), 2)
})
test_that("two group exist", {
expect_equal(length(unique(kinsim_double(GroupRel = c(.98,.644),
ace2 = c(5,7,9),
ifComb = TRUE))), 2)
})
test_that("two group exist", {
expect_equal(length(unique(kinsim_double(GroupRel = c(.98,.644),
ace2 = c(5,7,9),
ifComb = TRUE)$GroupName)), 2)
})
test_that("ncol correct", {
expect_equal(ncol(kinsim_double(GroupSizes = c(59,131),
GroupRel = c(.98,.644),
ace2 = c(5,7,9),
ifComb = TRUE)), 190)
})
test_that("nrow correct", {
expect_equal(nrow(kinsim_double(GroupSizes = c(59,131),
GroupRel = c(.98,.644),
ace2 = c(5,7,9),
ifComb = TRUE)), 190)
})
test_that("ncol correct", {
expect_equal(ncol(kinsim_double(GroupSizes = c(159,231),
GroupRel = c(.98,.5),
ace2 = c(5,7,9),
ifComb = FALSE)), 12)
})
use_test("Sim_Fit)
""
"
use_test("Sim_Fit")
test_that("Results Level Check", {
expect_equal(length(Sim_Fit()), 2)
})
test_that("Results Level Check", {
expect_equal(length(Sim_Fit(nIter = 5,saveRaw=FALSE)), 2)
})
test_that("Results Level Check", {
expect_equal(length(Sim_Fit(nIter = 5,saveRaw=TRUE)), 2)
})
test_that("Results Level Check", {
expect_equal(levels(Sim_Fit(nIter = 5,saveRaw=TRUE)), 2)
})
Sim_Fit(nIter = 5,saveRaw=TRUE)
testststs <- Sim_Fit(nIter = 5,saveRaw=TRUE)
View(testststs)
test_that("Results Category Check", {
expect_equal(length(Sim_Fit(nIter = 5,saveRaw=TRUE)[[1]]), 5)
})
test_that("Results Level Check", {
expect_equal(length(Sim_Fit(nIter = 5,saveRaw=TRUE)), 5)
})
test_that("Results Category Check", {
expect_equal(length(Sim_Fit(nIter = 5,saveRaw=TRUE)[[1]]), 2)
})
use_test("Power_LS")
test_that("Power and sample size can match", {
expect_equal(round(Power_LS(N1 = 57, N2 = 114, h2 = .5, c2 = .2, R1 = 1, R2 = .50),1),.8)
})
test_that("Power and sample size can match", {
expect_equal(round(Power_LS(p_N1 = .333333, power = .8,h2 = .5, c2 = .2, R1 = 1, R2 = .50)[1]),57)
})
check()
check()
check()
check()
usethis::use_github_action_check_standard()
usethis::use_github_action("check-release")
usethis::use_github_action("check-standard")
library(devtools)
usethis::use_vignette("")
usethis::use_vignette("SimFit")
library(SimFit)
?kinsim_double
?Sim_Fit
results_fit <- Sim_Fit(
GroupNames = c("SStwins", "OStwins"),
GroupSizes = c(120, 60),
nIter = 50,
SSeed = 62,
GroupRel = c(.75, 0.5),
GroupR_c = c(1, 1),
mu = c(0, 0),
ace1 = c(.6, .2, .2),
ace2 = c(.6, .2, .2),
ifComb = TRUE,
lbound = FALSE,
saveRaw = FALSE
)
View(results_fit)
results_fit[["Iteration1"]][["Results"]][["nest"]]
?Power_LS
Power_LS(N1=120, N2=60, power, p_N1 = NULL, h2=.6, c2=.2, R1 = .75, R2 = 0.5, alpha = 0.05)
Power_LS(N1=120, N2=60, power, p_N1 = NULL, h2=.6, c2=.2, R1 = .75, R2 = 0.5, alpha = 0.05)
Power_LS(N1=120, N2=60, power, p_N1 = NULL, h2=.6, c2=.2, R1 = .75, R2 = 0.5, alpha = 0.05)
Power_LS(N1=120, N2=60, power, p_N1 = NULL, h2=.6, c2=.2, R1 = .75, R2 = 0.5, alpha = 0.05)
Power_LS(N1=100, N2=60, power, p_N1 = NULL, h2=.6, c2=.2, R1 = .75, R2 = 0.5, alpha = 0.05)
Power_LS(N1, N2, power=.8, p_N1 = .6, h2=.6, c2=.2, R1 = .75, R2 = 0.5, alpha = 0.05)
check()
install()
library(SimFit)
library(SimFit)
Power_LS(N1=120, N2=60, power, p_N1 = NULL, h2=.6, c2=.2, R1 = .75, R2 = 0.5, alpha = 0.05)
p_N1 = NULL, h2=.6, c2=.2, R1 = .75, R2 = 0.5, alpha = 0.05)
Power_LS(N1=120, N2=60, p_N1 = NULL, h2=.6, c2=.2, R1 = .75, R2 = 0.5, alpha = 0.05)
install()
library(devtools)
install()
library(devtools)
check()
release()
spell_check()
release()
check_rhub
check_rhub()
check_rhub()
install()
check_rhub()
library(devtools)
install()
release()
install.packages("pkgdown")
use_readme_rmd()
install()
release()
use_cran_comments()
release()
library(devtools)
check()
install()
check()
install.packages("rmarkdown", repos = "https://cran.revolutionanalytics.com")
install.packages("rmarkdown", repos = "https://cran.revolutionanalytics.com")
library(devtools)
check()
install()
install()
check()
release()
